from database import crud
from aiogram import types
from loader import dp, bot
from database import crud, models
from aiogram import types
from config import admins, super_admins
import messages
from keyboards import keyboard


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    get_code = message.text.split()
    if crud.user_by_telegram_id(message.from_user.id):
        await message.answer('ü§ñ–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å –¥–ª—è –í–∞—Å!', reply_markup=keyboard.start())
    else:
        if len(get_code) > 1:
            res = crud.user_code(get_code[1], message.from_user.id)
            if res:
                await message.answer(f'üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {res}, –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ì–ê–û–£ "–õ–∏—Ü–µ–π –ò–Ω–Ω–æ–ø–æ–ª–∏—Å".' +
                                     messages.hello)
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard.start())
            else:
                await message.answer('üòê–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –í–∞—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.')
        else:
            await message.answer('ü§®–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')


@dp.callback_query_handler(text_startswith='main')
async def main_menu(cq: types.CallbackQuery):
    await bot.answer_callback_query(cq.id)
    status = cq.data.split('_')[1]
    if status == 'absent':
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=keyboard.classes())

    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(text_startswith='to_main')
async def main_menu(cq: types.CallbackQuery):
    await bot.answer_callback_query(cq.id)
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard.start())

    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(text_startswith='class_')
async def main_menu(cq: types.CallbackQuery):
    await bot.answer_callback_query(cq.id)
    class_ = cq.data.split('_')[1]
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö:', reply_markup=keyboard.students(class_))

    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(text_startswith='student_')
async def main_menu(cq: types.CallbackQuery):
    await bot.answer_callback_query(cq.id)
    info = cq.data.split('_')
    await bot.send_message(cq.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞: <b>{info[3]}</b>', parse_mode='HTML',
                           reply_markup=keyboard.reasons(info[2], info[1]))

    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.message_handler(commands=["get_codes"])
async def get_codes(message: types.Message):
    if message.from_user.id in super_admins:
        users = crud.get_user_list_with_role(not_role=8)
        text = '\n'.join(users)
        await message.answer(text)


