import datetime
import logging

from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram.dispatcher import FSMContext
from loader import dp, bot
from database import crud, models
from aiogram import types
import pymorphy2


from config import admins, super_admins, info_group, GLOBAL_SET, task_admins
import messages
from keyboards import keyboard
from special.funcforbot import create_report
from states.bot_state import BotStates

morph = pymorphy2.MorphAnalyzer()


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), commands=["start"])
async def start(message: types.Message, state: FSMContext):
    get_code = message.text.split()
    if crud.user_by_telegram_id(message.from_user.id):
        await message.answer('ü§ñ–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å –¥–ª—è –í–∞—Å!', reply_markup=keyboard.start(message.from_user.id))
        await state.set_state(BotStates.main_menu.state)
    else:
        if len(get_code) > 1:
            res = crud.user_code(get_code[1], message.from_user.id)
            if res:
                await message.answer(f'üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {res}, –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ì–ê–û–£ "–õ–∏—Ü–µ–π –ò–Ω–Ω–æ–ø–æ–ª–∏—Å".' +
                                     messages.hello)
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                     reply_markup=keyboard.start(message.from_user.id))
                await state.set_state(BotStates.main_menu.state)
            else:
                await message.answer('üòê–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –í–∞—Å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.')
        else:
            await message.answer('ü§®–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!')


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='main', state='*')
async def get_class(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    status = cq.data.split('_')[1]
    if status == 'absent':
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=keyboard.classes())
        await state.set_state(BotStates.absent_menu.state)
    elif status == 'admin':
        await bot.send_message(cq.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n'
                                                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard.admin_panel())
        await state.set_state(BotStates.admin_menu.state)
    elif status == 'repair':
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?',
                               reply_markup=keyboard.kb_master())
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='to_main', state='*')
async def main_menu(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                           reply_markup=keyboard.start(cq.from_user.id))
    await state.set_state(BotStates.main_menu.state)
    await state.reset_data()
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='class_', state='*')
async def set_absents(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    class_ = cq.data.split('_')[1]
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö:', reply_markup=keyboard.students(class_))
    await state.set_state(BotStates.absent_menu.state)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='student_', state='*')
async def set_reason(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    info = cq.data.split('_')
    if info[4] == "0":
        await bot.send_message(cq.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞: <b>{info[3]}</b>', parse_mode='HTML',
                               reply_markup=keyboard.reasons(info[2], info[1]))
    else:
        crud.delete_absent(info[1])
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö:', reply_markup=keyboard.students(info[2]))
    await state.set_state(BotStates.absent_menu.state)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='reason_', state='*')
async def save_reason(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    info = cq.data.split('_')
    crud.save_absent(info[1], info[2])
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö:', reply_markup=keyboard.students(info[3]))
    await state.set_state(BotStates.absent_menu.state)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='save_', state='*')
async def save_absent(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    info = cq.data.split('_')
    class_ = crud.get_classes_by_id(info[1])
    user = crud.get_user(telegram_id=cq.from_user.id)
    absent_list = crud.get_absent_users_by_class(info[1])
    class_count = crud.get_class_count(info[1])
    absent_message = ''
    if absent_list:
        absent_message = '\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: '
        for one in absent_list:
            absent_message += f'{one[0]} ({one[1]}), '
        absent_message = absent_message[:-2]
    sex = '–æ—Ç–ø—Ä–∞–≤–∏–ª'
    name = user.get_name()
    parsed_word = morph.parse(name.split()[1])[0]
    if parsed_word.tag.gender == 'femn':
        sex += '–∞'
    await bot.send_message(info_group, f'{name} {sex} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–ª–∞—Å—Å—É <b>{class_[0]}{class_[1]}</b>:\n'
                                       f'–£—á–µ–Ω–∏–∫–æ–≤ –≤ –∫–ª–∞—Å—Å–µ: <b>{class_count[0] - class_count[1]} –∏–∑ {class_count[0]}</b>'
                                       f'{absent_message}', parse_mode='HTML')
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:', reply_markup=keyboard.classes())
    GLOBAL_SET.add(class_)
    all_classes = crud.get_classes_list()
    if len(GLOBAL_SET) == len(all_classes):
        file_name = create_report()
        for telegram_id in admins:
            try:
                with open(file_name, 'rb') as f:
                    await bot.send_document(telegram_id, f)
            except Exception as e:
                await bot.send_message(148161847, f'{e}')
    await state.set_state(BotStates.absent_menu.state)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='lesson_', state='*')
async def get_lessons(cq: types.CallbackQuery):
    if cq.from_user.id in admins:
        index = int(cq.data.split('_')[1])
        all_lessons = crud.get_lesson_today(index)
        lessons = [crud.get_classes_by_id(lesson[2]) for lesson in all_lessons]
        lessons = [[lesson[0], lesson[1]] for lesson in lessons]
        teachers = [crud.get_user(edu_id=lesson[0]).get_name() for lesson in all_lessons]
        data = [[lessons[i][0], lessons[i][1], teachers[i]] for i in range(len(teachers))]
        data.sort()
        users = [f'{data[i][0]}{data[i][1]} {data[i][2]}' for i in range(len(data))]
        text = '\n'.join(users)
        try:
            await bot.send_message(cq.from_user.id, text, reply_markup=keyboard.lessons_panel())
        except Exception as e:
            await bot.send_message(cq.from_user.id, '–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–æ–≤ –Ω–µ—Ç!', reply_markup=keyboard.lessons_panel())
        await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='admin', state='*')
async def admin_panel(cq: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(cq.id)
    status = cq.data.split('_')[1]
    if status == 'lessons':
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:', reply_markup=keyboard.lessons_panel())
    if status == 'reports':
        await bot.send_message(cq.from_user.id, '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
                                                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard.admin_panel())
    if status == 'tasks':
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard.admin_task_panel())
    await state.set_state(BotStates.admin_menu.state)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), commands=["get_codes"], state='*')
async def get_codes(message: types.Message):
    if message.from_user.id in super_admins:
        users = crud.get_user_list_with_role(not_role=8)
        text = '\n'.join(users)
        await message.answer(text)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='master_', state='*')
async def get_block(cq: types.CallbackQuery, state: FSMContext):
    _, master, user = cq.data.split('_')
    await state.update_data(master=int(master), employee=int(user))
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫:', reply_markup=keyboard.blocks())
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='cab_', state='*')
async def get_cab(cq: types.CallbackQuery, state: FSMContext):
    block = cq.data.split('_')[1]
    await state.update_data(block=block)
    mes = await bot.send_message(cq.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–µ')
    await state.set_state(BotStates.task_cabinet.state)
    await state.update_data(message_id=mes.message_id)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=BotStates.task_cabinet)
async def master_panel(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(cabinet=message.text)
    await state.set_state(BotStates.wait_for_task.state)
    mes = await bot.send_message(message.from_user.id, '–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë')
    await bot.delete_message(chat_id=message.from_user.id, message_id=data['message_id'])
    await state.update_data(message_id=mes.message_id)


@dp.message_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), state=BotStates.wait_for_task)
async def try_to_save_task(message: types.Message, state: FSMContext):
    correct_block = {'a': '–ê', 'b': '–ë', 'c': '–í'}
    data = await state.get_data()
    last_id = crud.save_task(message.text, message.from_user.id, data['master'],
                             correct_block[data["block"]], data["cabinet"], data["employee"])
    if bool(last_id):
        await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
        role = crud.get_role(data['master'])
        for x_id in task_admins:
            user = crud.get_user(telegram_id=message.from_user.id)
            await bot.send_message(x_id, f'–ó–∞—è–≤–∫–∞ –æ—Ç: <b>{user.get_name()}</b>\n'
                                         f'–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: <b>{datetime.datetime.now().strftime("%d.%m.%y %H:%M")}</b>\n'
                                         f'–ö–æ–º—É: <b>{role.title}</b>\n'
                                         f'–ë–ª–æ–∫: <b>{correct_block[data["block"]]}</b>\n'
                                         f'–ö–∞–±–∏–Ω–µ—Ç: <b>{data["cabinet"]}</b>\n'
                                         f'–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}', reply_markup=keyboard.task_keyboard(last_id))
        await bot.delete_message(chat_id=message.from_user.id, message_id=data['message_id'])
        await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É?',
                               reply_markup=keyboard.kb_master())
        await state.reset_data()
        await state.set_state(BotStates.task.state)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='task_list', state='*')
async def all_task_panel(cq: types.CallbackQuery, state: FSMContext):
    tasks = crud.get_tasks_by_telegram_id(cq.from_user.id)
    if tasks:
        await state.set_state(BotStates.all_task.state)
        messages_id = []
        for task in tasks:
            x = await bot.send_message(cq.from_user.id, task.description, reply_markup=keyboard.task_list(task.task_id))
            messages_id.append(x.message_id)
        await state.update_data(messages_id=messages_id)
        await bot.send_message(cq.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É',
                               reply_markup=keyboard.task_go_back())
    else:
        await bot.send_message(cq.from_user.id, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!', reply_markup=keyboard.go_back())
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='delete_task',
                           state=BotStates.all_task)
async def delete_task(cq: types.CallbackQuery, state: FSMContext):
    task = int(cq.data.split('_')[2])
    crud.delete_task(task)
    data = await state.get_data()
    data['messages_id'].remove(cq.message.message_id)
    await state.update_data(messages_id=data['messages_id'])
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='task_to_main',
                           state=BotStates.all_task)
async def delete_task(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    for x in data['messages_id']:
        await bot.delete_message(chat_id=cq.from_user.id, message_id=x)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)
    await state.reset_data()
    await state.set_state(BotStates.task.state)
    await bot.send_message(cq.from_user.id, '–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É?',
                           reply_markup=keyboard.kb_master())


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='tadmin_', state='*')
async def admin_task(cq: types.CallbackQuery, state: FSMContext):
    task = cq.data.split('_')[1]
    await state.update_data(message_id=[])
    if task == 'current':
        tasks = crud.get_all_task()
        for one in tasks:
            data = await state.get_data()
            user = crud.get_user(user_id=one.client_id)
            role = crud.get_role(one.role)
            text = f'–ó–∞—è–≤–∫–∞ –æ—Ç: <b>{user.get_name()}</b>\n' \
                   f'–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: <b>{one.start_date.strftime("%d.%m.%y %H:%M")}</b>\n' \
                   f'–ö–æ–º—É: <b>{role.title}</b>\n' \
                   f'–ë–ª–æ–∫: <b>{one.block}</b>\n' \
                   f'–ö–∞–±–∏–Ω–µ—Ç: <b>{one.cabinet}</b>\n' \
                   f'–û–ø–∏—Å–∞–Ω–∏–µ: {one.description}'
            x = await bot.send_message(cq.from_user.id, text,
                                       reply_markup=keyboard.task_keyboard(one.task_id))
            data['message_id'].append(x.message_id)
            await state.update_data(message_id=data['message_id'])
        await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω—É',
                               reply_markup=keyboard.cancle())
    elif task == 'report':
        pass
    elif task == 'month':
        pass
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='cancel_', state='*')
async def cancel_task(cq: types.CallbackQuery, state: FSMContext):
    task = cq.data.split('_')[1]
    if task == 'task':
        data = await state.get_data()
        for message_id in data['message_id']:
            try:
                await bot.delete_message(chat_id=cq.from_user.id, message_id=message_id)
            except Exception as e:
                logging.info(e)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)
    await bot.send_message(cq.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard.admin_task_panel())


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='employee_', state='*')
async def set_employee_for_task(cq: types.CallbackQuery):
    _, user_id, task_id = cq.data.split('_')
    crud.update_task(int(task_id), int(user_id))
    user = crud.get_user(user_id=user_id)
    await bot.send_message(user.telegram_id, cq.message.text, reply_markup=keyboard.employee_complete(int(task_id)))
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)


@dp.callback_query_handler(ChatTypeFilter(chat_type=types.ChatType.PRIVATE), text_startswith='complete', state='*')
async def complete_for_task(cq: types.CallbackQuery):
    _, user_id, task_id = cq.data.split('_')
    crud.update_task(int(task_id), int(user_id), True)
    await bot.delete_message(chat_id=cq.from_user.id, message_id=cq.message.message_id)
